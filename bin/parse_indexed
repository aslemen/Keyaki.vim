#!/bin/bash

####################
# help information #
####################

function help_information () {

cat 1>&2 << END
NAME
      parse_indexed - creates argument-predicate information

SYNOPSIS
      parse_indexed [OPTIONS]

DESCRIPTION
      Takes a parsed tree from stdin and outputs the same tree only with
      arguments and predicate information calculated.

OPTIONS
END

cat $0 | grep ") *\# " 1>&2

}

function example () {

cat 1>&2 << END

EXAMPLE
      $ cat << EOF | parse_indexed | munge-trees -p
END

cat $0 | sed '1,/^cat << DEMO1/d; /^DEMO1$/,$d' | munge-trees -p | sed 's/^/      > /' 1>&2

cat 1>&2 << END
      > EOF
END

cat << DEMO1 | $0 | munge-trees -p | sed 's/^/      -| /' 1>&2
( (IP-MAT (CONJ But) (NP-SBJ (PRO they) (CP-REL (WNP-1 0) (C that) (IP-SUB (NP-SBJ *T*-1) (VBP fight) (SENSE *fight.0*) (PP (P for) (NP (N freedom)))))) (, ,) (VBP undertake) (SENSE *undertake.0*) (NP-OB1 (D The) (ADJS noblest) (N cause) (CP-REL (WNP-2 0) (C 0) (IP-SUB (NP-OB1 *T*-2) (NP-SBJ (N mankind)) (MD can) (HV have) (SENSE *have.4*) (PP (P at) (NP (N stake))))))) (ID 53_BUFFALO;CLARK-1853;EN))
DEMO1

cat 1>&2 << END

EXAMPLE
      $ cat << EOF | parse_indexed | munge-trees -p
END

cat $0 | sed '1,/^cat << DEMO2/d; /^DEMO2$/,$d' | munge-trees -p | sed 's/^/      > /' 1>&2

cat 1>&2 << END
      > EOF
END

cat << DEMO2 | $0 | munge-trees -p | sed 's/^/      -| /' 1>&2
( (IP-MAT (PP (NP (NPR 花子)) (P は)) (NP-SBJ *) (IP-ADV (PP (NP (N 果汁)) (P を)) (NP-OB1 *を*) (IP-INF (VB 凍ら)) (VB2 せ) (P て)) (CONJ *) (PP (NP (N デザート)) (P を)) (NP-OB1 *を*) (VB 作っ) (AXD た) (PU 。)) (ID 434_textbook_kisonihongo;page_105;AT50-6;MJ))
DEMO2

}

function see_also () {

cat 1>&2 << END

SEE ALSO
      indexed_to_onf(1), tree_positions(1), indexed_to_propbank(1)
END

}

while test $# -gt 0 ; do
  case "$1" in

      --noreset)     # do not reset variables with each example
         NORESET=1 ; shift ;;

      --iml)         # add CONJP IML layers
         IML=1 ; shift ;;

      --salsa)       # Salsa support
         SALTO=1 ; shift ;;

      --coindex)     # Coindexation
         COINDEX=1 ; shift ;;

      --robust)      # be as robust as possible
         ROBUST=1 ; shift ;;

      --framenet)    # Framenet support
         FRAMENET=1 ; shift ;;

      --debug)       # keep tree and sed information for debugging
         DEBUG=1 ; shift ;;

      --example)     # show examples
         help_information
         example
         see_also
         exit ;;

      *)             # show this help message
         help_information
         see_also
         exit ;;

  esac
done

######################
# script starts here #
######################

SCRIPTS=$(dirname $0)/../scripts

TEMP1=${TMP:-"/tmp"}/output_gather1$$
TEMP2=${TMP:-"/tmp"}/output_gather2$$
TEMP3=${TMP:-"/tmp"}/output_gather3$$

# gather input
if test ${IML}; then
  tsurgeon_script "${SCRIPTS}/add_conjp_iml.tsurgeon" "${SCRIPTS}/head_add.tsurgeon"
else
  tsurgeon_script "${SCRIPTS}/head_add.tsurgeon"
fi | \
tree_number_terminals --sent > "${TEMP1}"

# process to retrieve indexing
cat "${TEMP1}" | \
if test ${ROBUST}; then
  parse_normalize --bind_embeddings --wh --changefloat --robust
else
  parse_normalize --bind_embeddings --wh --changefloat
fi | \
if test "${DEBUG}"; then
  tee output.realtree
else
  cat
fi | \
if test "${NORESET}"; then
  see_sct
else
  see_sct --reset
fi | \
run_sct --roles | \
lang_to_frames --script | \
sed '
s/__hyphen__/-/g
s/__dot__/・/g

## the following deletion makes robust, but to find errors it should be commented out
/,\/gi$/d
' > "${TEMP2}"

if test "${DEBUG}"; then
  cat "${TEMP1}" > output.tree
  cat "${TEMP2}" > output.sed
fi

# integrate indexing
for i in $(seq $(cat "${TEMP1}" | wc -l));
do
  cat "${TEMP2}" | select_data "${i}" > "${TEMP3}"

  cat "${TEMP1}" | sed -n "${i}"p | \
  sed -f "${TEMP3}" | \
  tree_to_table | \
awk '
{ 
extra=gensub(/^[^<]*/, "", 1, $NF)
token=gensub(/;<.*/, "", 1, $NF)
print $1, $2 (extra ? ";" extra : ""), token
}
' | \
  table_to_tree

  rm -f "${TEMP3}"
done | \
if test "${COINDEX}"; then
  tsurgeon_script "${SCRIPTS}/integrate_indexing.tsurgeon" "${SCRIPTS}/framenet_support.tsurgeon" "${SCRIPTS}/framenet_support_coindex.tsurgeon"
elif test "${FRAMENET}"; then
  tsurgeon_script "${SCRIPTS}/integrate_indexing.tsurgeon" "${SCRIPTS}/framenet_support.tsurgeon"
elif test "${SALTO}"; then
  tsurgeon_script "${SCRIPTS}/integrate_indexing.tsurgeon" "${SCRIPTS}/salsa_support.tsurgeon"
else
  tsurgeon_script "${SCRIPTS}/integrate_indexing.tsurgeon"
fi

if test "${DEBUG}"; then
  # report when no analysis from run_sct
  awk '$1 == "###" { num++; getline; if (!$0) print "No analysis: " num }' "${TEMP2}" 1>&2
fi

rm -f "${TEMP1}" "${TEMP2}"

